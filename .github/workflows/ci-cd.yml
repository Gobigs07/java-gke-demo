name: CI/CD Pipeline

on:
  push:
    branches:
      - "main"

jobs:
  build-and-deploy:
    runs-on: ubuntu-latest

    steps:
    # Step 1: Checkout code
    - name: Checkout code
      uses: actions/checkout@v3

    # Step 2: Set up JDK (for Maven build)
    - name: Set up JDK
      uses: actions/setup-java@v3
      with:
        distribution: 'temurin'
        java-version: '17'

    # Step 3: Build with Maven (skip tests for faster build)
    - name: Build with Maven
      run: mvn clean package -DskipTests

    # Step 4: Authenticate with Google Cloud
    - name: Authenticate with Google Cloud
      uses: google-github-actions/auth@v1
      with:
        credentials_json: '${{ secrets.GCP_SA_KEY }}'

    # Step 5: Configure Docker to use Google Artifact Registry
    - name: Configure Docker for Artifact Registry
      run: gcloud auth configure-docker ${{ secrets.GAR_ZONE }}-docker.pkg.dev

    # Step 6: Build Docker image
    - name: Docker build
      run: docker build -t ${{ secrets.GAR_ZONE }}-docker.pkg.dev/${{ secrets.GCP_PROJECT }}/${{ secrets.GAR_REPO }}/${{ secrets.IMAGE }}:${{ secrets.IMAGE_TAG }} .

    # Step 7: Push Docker image to Google Artifact Registry
    - name: Push image
      run: docker push ${{ secrets.GAR_ZONE }}-docker.pkg.dev/${{ secrets.GCP_PROJECT }}/${{ secrets.GAR_REPO }}/${{ secrets.IMAGE }}:${{ secrets.IMAGE_TAG }}

    # Step 8: Set up gcloud CLI for GKE deployment
    - name: Setup gcloud
      uses: google-github-actions/setup-gcloud@v1
      with:
        project_id: ${{ secrets.GCP_PROJECT }}
        service_account_key: ${{ secrets.GCP_SA_KEY }}
        export_default_credentials: true

    # Step 9: Get GKE credentials to interact with the cluster
    - name: Get GKE credentials
      run: gcloud container clusters get-credentials ${{ secrets.GKE_CLUSTER }} --zone ${{ secrets.GKE_ZONE }}

    # Step 10: Deploy to GKE using kubectl
    - name: Deploy to GKE
      run: kubectl apply -f k8s/
